# Создать двух пользователей (с помощью метода User.objects.create_user('username')).
python3 manage.py shell
from django.contrib.auth.models import User
user1 = User.objects.create_user(username='user1', password='samar')
user2 = User.objects.create_user(username='user2', password='keen')

# Создать два объекта модели Author, связанные с пользователями.
from news.models import Author
from django.contrib.auth.models import User
user1 = User.objects.get(username='user1')
author1 = Author.objects.create(user=user1)
user2 = User.objects.get(username='user2')
author2 = Author.objects.create(user=user2)

# Добавить 4 категории в модель Category.
from news.models import Category
category1 = Category.objects.create(category='category1')
category2 = Category.objects.create(category='category2')
category3 = Category.objects.create(category='category3')
category4 = Category.objects.create(category='category4')

# Добавить 2 статьи и 1 новость.
user1 = User.objects.get(username='user1')
author1 = Author.objects.get(user=user1)
article1 = Post.objects.create(author=author1, post_type='article', title='Article 1 Title', text='Content of Article 1')
user2 = User.objects.get(username='user2')
author2 = Author.objects.get(user=user2)
article2 = Post.objects.create(author=author2, post_type='article', title='Article 2 Title', text='Content of Article 2')
news1 = Post.objects.create(author=author1, post_type='news', title='News 1 Title', text='Content of News 1')

# Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
category1 = Category.objects.get(category='category1')
category2 = Category.objects.get(category='category2')
category3 = Category.objects.get(category='category3')
article1.category.add(category1,category2,category3)
article2.category.add(category1,category3)
news1.category.add(category2,category3)

# Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
from news.models import Post, Comment

post1 = Post.objects.get(id=1)
post2 = Post.objects.get(id=2)
user1 = User.objects.get(username='user1')
user2 = User.objects.get(username='user2')

comment1_post1 = Comment.objects.create(post=post1,user=user1, text='Tect for comment1_post1' )
comment2_post1 = Comment.objects.create(post=post2,user=user2, text='Text for comment2_post1' )
comment1_post2 = Comment.objects.create(post=post2, user=user1, text='Comment 1 for Post 2')
comment2_post2 = Comment.objects.create(post=post2, user=user2, text='Comment 2 for Post 2')

# Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
post = Post.objects.get(id=1)
comment = Comment.objects.get(id=1)
post.like()
comment.like()
post.dislike()
comment.dislike()

# Обновить рейтинги пользователей.
author1 = Author.objects.get(id=1)
author1.update_rating()

author2 = Author.objects.get(id=2)
author2.update_rating()

# Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

from news.models import Author
best_author = Author.objects.order_by('-rating').first()
if best_author:
    best_username = best_author.user.username
    best_rating = best_author.rating
    print("Username:", best_username)
    print("Rating:", best_rating)
else:
    print("No authors found.")

# Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
from news.models import Post
best_post = Post.objects.order_by('-rating').first()

best_post_date = best_post.created_at
best_post_author_username = best_post.author.user.username
best_post_rating = best_post.rating
best_post_title = best_post.title
best_post_preview = best_post.preview()

print("Date Added:", best_post_date)
print("Author Username:", best_post_author_username)
print("Rating:", best_post_rating)
print("Title:", best_post_title)
print("Preview:", best_post_preview)

# Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

from news.models import Comment

comments = Comment.objects.filter(post=best_post)
for comment in comments:
    comment_date = comment.created_at
    comment_user = comment.user.username
    comment_rating = comment.rating
    comment_text = comment.text

print("Date:", comment_date)
print("User:", comment_user)
print("Rating:", comment_rating)
print("Text:", comment_text)


